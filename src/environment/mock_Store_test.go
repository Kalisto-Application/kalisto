// Code generated by mockery v2.29.0. DO NOT EDIT.

package environment

import (
	models "kalisto/src/models"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Envs provides a mock function with given fields:
func (_m *MockStore) Envs() (map[models.EnvKind]models.Envs, error) {
	ret := _m.Called()

	var r0 map[models.EnvKind]models.Envs
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[models.EnvKind]models.Envs, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[models.EnvKind]models.Envs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[models.EnvKind]models.Envs)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Envs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Envs'
type MockStore_Envs_Call struct {
	*mock.Call
}

// Envs is a helper method to define mock.On call
func (_e *MockStore_Expecter) Envs() *MockStore_Envs_Call {
	return &MockStore_Envs_Call{Call: _e.mock.On("Envs")}
}

func (_c *MockStore_Envs_Call) Run(run func()) *MockStore_Envs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Envs_Call) Return(_a0 map[models.EnvKind]models.Envs, _a1 error) *MockStore_Envs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_Envs_Call) RunAndReturn(run func() (map[models.EnvKind]models.Envs, error)) *MockStore_Envs_Call {
	_c.Call.Return(run)
	return _c
}

// SaveEnvs provides a mock function with given fields: _a0
func (_m *MockStore) SaveEnvs(_a0 map[models.EnvKind]models.Envs) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[models.EnvKind]models.Envs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_SaveEnvs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveEnvs'
type MockStore_SaveEnvs_Call struct {
	*mock.Call
}

// SaveEnvs is a helper method to define mock.On call
//   - _a0 map[models.EnvKind]models.Envs
func (_e *MockStore_Expecter) SaveEnvs(_a0 interface{}) *MockStore_SaveEnvs_Call {
	return &MockStore_SaveEnvs_Call{Call: _e.mock.On("SaveEnvs", _a0)}
}

func (_c *MockStore_SaveEnvs_Call) Run(run func(_a0 map[models.EnvKind]models.Envs)) *MockStore_SaveEnvs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[models.EnvKind]models.Envs))
	})
	return _c
}

func (_c *MockStore_SaveEnvs_Call) Return(_a0 error) *MockStore_SaveEnvs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_SaveEnvs_Call) RunAndReturn(run func(map[models.EnvKind]models.Envs) error) *MockStore_SaveEnvs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStore(t mockConstructorTestingTNewMockStore) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
