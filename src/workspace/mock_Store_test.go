// Code generated by mockery v2.29.0. DO NOT EDIT.

package workspace

import (
	models "kalisto/src/models"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// SaveWorkspaces provides a mock function with given fields: w
func (_m *MockStore) SaveWorkspaces(w []models.Workspace) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Workspace) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_SaveWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveWorkspaces'
type MockStore_SaveWorkspaces_Call struct {
	*mock.Call
}

// SaveWorkspaces is a helper method to define mock.On call
//   - w []models.Workspace
func (_e *MockStore_Expecter) SaveWorkspaces(w interface{}) *MockStore_SaveWorkspaces_Call {
	return &MockStore_SaveWorkspaces_Call{Call: _e.mock.On("SaveWorkspaces", w)}
}

func (_c *MockStore_SaveWorkspaces_Call) Run(run func(w []models.Workspace)) *MockStore_SaveWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.Workspace))
	})
	return _c
}

func (_c *MockStore_SaveWorkspaces_Call) Return(_a0 error) *MockStore_SaveWorkspaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_SaveWorkspaces_Call) RunAndReturn(run func([]models.Workspace) error) *MockStore_SaveWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// Workspace provides a mock function with given fields:
func (_m *MockStore) Workspace() ([]models.Workspace, error) {
	ret := _m.Called()

	var r0 []models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Workspace, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Workspace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Workspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Workspace'
type MockStore_Workspace_Call struct {
	*mock.Call
}

// Workspace is a helper method to define mock.On call
func (_e *MockStore_Expecter) Workspace() *MockStore_Workspace_Call {
	return &MockStore_Workspace_Call{Call: _e.mock.On("Workspace")}
}

func (_c *MockStore_Workspace_Call) Run(run func()) *MockStore_Workspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Workspace_Call) Return(_a0 []models.Workspace, _a1 error) *MockStore_Workspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_Workspace_Call) RunAndReturn(run func() ([]models.Workspace, error)) *MockStore_Workspace_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStore(t mockConstructorTestingTNewMockStore) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
