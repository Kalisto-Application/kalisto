// Code generated by mockery v2.29.0. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBookStoreServer is an autogenerated mock type for the BookStoreServer type
type MockBookStoreServer struct {
	mock.Mock
}

type MockBookStoreServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookStoreServer) EXPECT() *MockBookStoreServer_Expecter {
	return &MockBookStoreServer_Expecter{mock: &_m.Mock}
}

// GetBook provides a mock function with given fields: _a0, _a1
func (_m *MockBookStoreServer) GetBook(_a0 context.Context, _a1 *GetBookRequest) (*GetBookResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetBookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetBookRequest) (*GetBookResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetBookRequest) *GetBookResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetBookRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookStoreServer_GetBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBook'
type MockBookStoreServer_GetBook_Call struct {
	*mock.Call
}

// GetBook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetBookRequest
func (_e *MockBookStoreServer_Expecter) GetBook(_a0 interface{}, _a1 interface{}) *MockBookStoreServer_GetBook_Call {
	return &MockBookStoreServer_GetBook_Call{Call: _e.mock.On("GetBook", _a0, _a1)}
}

func (_c *MockBookStoreServer_GetBook_Call) Run(run func(_a0 context.Context, _a1 *GetBookRequest)) *MockBookStoreServer_GetBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetBookRequest))
	})
	return _c
}

func (_c *MockBookStoreServer_GetBook_Call) Return(_a0 *GetBookResponse, _a1 error) *MockBookStoreServer_GetBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookStoreServer_GetBook_Call) RunAndReturn(run func(context.Context, *GetBookRequest) (*GetBookResponse, error)) *MockBookStoreServer_GetBook_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedBookStoreServer provides a mock function with given fields:
func (_m *MockBookStoreServer) mustEmbedUnimplementedBookStoreServer() {
	_m.Called()
}

// MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedBookStoreServer'
type MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedBookStoreServer is a helper method to define mock.On call
func (_e *MockBookStoreServer_Expecter) mustEmbedUnimplementedBookStoreServer() *MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call {
	return &MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call{Call: _e.mock.On("mustEmbedUnimplementedBookStoreServer")}
}

func (_c *MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call) Run(run func()) *MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call) Return() *MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call) RunAndReturn(run func()) *MockBookStoreServer_mustEmbedUnimplementedBookStoreServer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBookStoreServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBookStoreServer creates a new instance of MockBookStoreServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBookStoreServer(t mockConstructorTestingTNewMockBookStoreServer) *MockBookStoreServer {
	mock := &MockBookStoreServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
